#include <string>
#include <iostream>
#include <fstream>
#include <cassert>  //for assert()
#include <algorithm>
#include "ArgumentManager.h"
using namespace std;

class List{

private:
     struct Node{
          Node * Next{nullptr};  //this is a pointer that hold the address of a node
          string Data{}; //this hold the data of the node type T

          // this is a default constructor that sets ecerything to null
          Node( ) = default;

          //creates a node stroring input data
          explicit Node (const string& data)
               : Data{data}{}

          /*creates a node storing input data and poiting to another node*/
          Node (const string& data, Node* next)
               : Data{data}, Next{next}{}

     };

     Node* m_head{nullptr}; //hold the address of the head
     int m_count{0};     // hold the number of nodes in thel ist

     //doesnt allow copy ///basically deletes the functionality unless i program it to do so
     List(const List&) = delete;
     List& operator = (const List&) = delete;

public:
     typedef Node* Position; //shows the address to a pointer

     List() = default; //making an empty list

     ~List(){  //properly deletes each node in the list
          Clear();
     }

     int Count() const{  //keeps count of list
          return m_count;
     }

     bool IsEmpty() const{    //checks if list is empty
          return (m_count ==0);
     }

     void Clear(){  //take everything out of the list
          while (! IsEmpty()){
               RemoveHead(); //removes the current head node
          }
     }
     Node* GetHead(){
          return m_head;
     }

     void InsertHead(const string& value){
          Node* node = new Node{value}; //making a new node

          node->Next = m_head;     //points the new node to the head node
          m_head = node;                //points the variable that holds the head to the new node

          ++ m_count;
     }

     void RemoveHead(){
          assert( ! IsEmpty()); //checks that the head is empty if it is then the program end if not then keep going

          Node* newHead = m_head->Next; //saves pointer to head's next node, before removing current head // basically, hea's next node will becmoe the *new* head

          //removes current head which is a node
          delete m_head;

          //update head, pointing to the node that followed the old head
          m_head = newHead;

          --m_count;
     }

     string ElementAt (Position node){  //access the data stored in a given node
          assert(! IsEmpty());
          assert( node != nullptr);

          return node->Data;
     }

     void InsertAfter(Position node, const string& value){
          assert(node != nullptr);

          Node* newNode = new Node{value};   //makes a new node

          //this will insert newNode between 'node' and 'node->next'
          newNode->Next = node->Next; //newNode will point to what node was pointing to
          node->Next = newNode; //the node will point to newNode

          ++m_count;
     }

     void RemoveAfter(Position node){
          assert( ! IsEmpty());
          assert(node != nullptr);

          Node* obsoleteNode = node->Next; // obNode holds the address to what node is pointing to
          node->Next = obsoleteNode->Next;

          delete obsoleteNode;

          --m_count;

     }

     void compare( List& obj, string ofile) const {
          ofstream out(ofile); //opens output file
          int amount = 0;
          Node* node = m_head;
          Node* node2 =  obj.GetHead();    // make a function to retur nhead///////////////////////////////////////////////////////////////////
          string* same = new string[m_count]{};   // for output later

          while(node != nullptr){

               while(node2 != nullptr){
                    if(node->Data == node2->Data){
                         same[amount] = node->Data;
                         ++amount;
                    }
                    node2 = node2->Next;
               }
               node = node->Next;
               node2 = obj.m_head;
          }
          string temp;
          for(int i = 0; i < amount - 1; i++){
               for(int j = 0; j < amount - i - 1; j++){
                    if(same[j].substr(0) > same[j+1].substr(0)){
                         temp = same[j];
                         same[j] = same[j+1];
                         same[j+1] = temp;
                    }else if (same[j].substr(0) == same[j+1].substr(0)){
                         int pos = same[j].find(' ');
                         int pos2 = same[j+1].find(' ');
                         if(same[j].substr(pos+1,pos+2) > same[j+1].substr(pos2+1,pos2+2)){
                              temp = same[j];
                              same[j] = same[j+1];
                              same[j+1] = temp;
                         }
                    }
               }
          }

          out << "Alikeness is " << amount << " out of " << m_count << ":\n";
          for(int i = 0; i < amount; i++){
               out << i+1 << ". " << same[i] << endl;
          }

          out.close();
          delete[] same; // clears out the heap
}

     Position Find(const string& value){     //passing by refference without allowing change to data to prevent expensive copy of informationg that would happen if passed by value
          if(IsEmpty()){
               return nullptr;
          }

          //linear search
          Node* node = m_head;
          while(node != nullptr){
               //compare current node's data with the search value
               if(node->Data == value){
                    //found
                    return node;
               }
               //moves forward to the next node in the list by seting the address of this node equal to what its pointing to which should be the next node
               node = node->Next;
          }

          //after traversing the whole list, no mathcing element was found
          return nullptr;
     }

     void Read(string file){

          ifstream input(file);          //makes an object to handle the file with data
          string temp;          //holds the string
          if(!input){
               cout << "the file does not exist!\n";
               exit(1);
          }
          while(getline(input, temp)){
          InsertHead(temp);
          }
          input.close();
     }
};

int main(int argc, char* argv[])
{
  ArgumentManager am(argc,argv);
  string haruFileName = am.get("haru_miya");
  string jituFileName = am.get("jitu_miya");
  string outputFileName = am.get("output");

  List haru; //makes a haru object of type string
  List jitu;; //makes a jitu object of typr string

  haru.Read(haruFileName);    //fills the haru list
  jitu.Read(jituFileName);    //fills the jitu list

  haru.compare(jitu, outputFileName);


}
